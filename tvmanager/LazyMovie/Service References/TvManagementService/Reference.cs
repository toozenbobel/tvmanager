//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace LazyMovie.TvManagementService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TvManagementService.IManagementService")]
    public interface IManagementService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IManagementService/Ping", ReplyAction="http://tempuri.org/IManagementService/PingResponse")]
        System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState);
        
        string EndPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IManagementService/Play", ReplyAction="http://tempuri.org/IManagementService/PlayResponse")]
        System.IAsyncResult BeginPlay(System.AsyncCallback callback, object asyncState);
        
        void EndPlay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IManagementService/StartPlayer", ReplyAction="http://tempuri.org/IManagementService/StartPlayerResponse")]
        System.IAsyncResult BeginStartPlayer(System.AsyncCallback callback, object asyncState);
        
        void EndStartPlayer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IManagementService/ClosePlayerWindow", ReplyAction="http://tempuri.org/IManagementService/ClosePlayerWindowResponse")]
        System.IAsyncResult BeginClosePlayerWindow(System.AsyncCallback callback, object asyncState);
        
        void EndClosePlayerWindow(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IManagementService/PlayFile", ReplyAction="http://tempuri.org/IManagementService/PlayFileResponse")]
        System.IAsyncResult BeginPlayFile(string pathToFile, System.AsyncCallback callback, object asyncState);
        
        void EndPlayFile(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManagementServiceChannel : LazyMovie.TvManagementService.IManagementService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManagementServiceClient : System.ServiceModel.ClientBase<LazyMovie.TvManagementService.IManagementService>, LazyMovie.TvManagementService.IManagementService {
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlayDelegate;
        
        private EndOperationDelegate onEndPlayDelegate;
        
        private System.Threading.SendOrPostCallback onPlayCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartPlayerDelegate;
        
        private EndOperationDelegate onEndStartPlayerDelegate;
        
        private System.Threading.SendOrPostCallback onStartPlayerCompletedDelegate;
        
        private BeginOperationDelegate onBeginClosePlayerWindowDelegate;
        
        private EndOperationDelegate onEndClosePlayerWindowDelegate;
        
        private System.Threading.SendOrPostCallback onClosePlayerWindowCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlayFileDelegate;
        
        private EndOperationDelegate onEndPlayFileDelegate;
        
        private System.Threading.SendOrPostCallback onPlayFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ManagementServiceClient() {
        }
        
        public ManagementServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManagementServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManagementServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<PingCompletedEventArgs> PingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PlayCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartPlayerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ClosePlayerWindowCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PlayFileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LazyMovie.TvManagementService.IManagementService.BeginPing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string LazyMovie.TvManagementService.IManagementService.EndPing(System.IAsyncResult result) {
            return base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LazyMovie.TvManagementService.IManagementService)(this)).BeginPing(callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            string retVal = ((LazyMovie.TvManagementService.IManagementService)(this)).EndPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new PingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        public void PingAsync(object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, null, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LazyMovie.TvManagementService.IManagementService.BeginPlay(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlay(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LazyMovie.TvManagementService.IManagementService.EndPlay(System.IAsyncResult result) {
            base.Channel.EndPlay(result);
        }
        
        private System.IAsyncResult OnBeginPlay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LazyMovie.TvManagementService.IManagementService)(this)).BeginPlay(callback, asyncState);
        }
        
        private object[] OnEndPlay(System.IAsyncResult result) {
            ((LazyMovie.TvManagementService.IManagementService)(this)).EndPlay(result);
            return null;
        }
        
        private void OnPlayCompleted(object state) {
            if ((this.PlayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayAsync() {
            this.PlayAsync(null);
        }
        
        public void PlayAsync(object userState) {
            if ((this.onBeginPlayDelegate == null)) {
                this.onBeginPlayDelegate = new BeginOperationDelegate(this.OnBeginPlay);
            }
            if ((this.onEndPlayDelegate == null)) {
                this.onEndPlayDelegate = new EndOperationDelegate(this.OnEndPlay);
            }
            if ((this.onPlayCompletedDelegate == null)) {
                this.onPlayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayCompleted);
            }
            base.InvokeAsync(this.onBeginPlayDelegate, null, this.onEndPlayDelegate, this.onPlayCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LazyMovie.TvManagementService.IManagementService.BeginStartPlayer(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartPlayer(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LazyMovie.TvManagementService.IManagementService.EndStartPlayer(System.IAsyncResult result) {
            base.Channel.EndStartPlayer(result);
        }
        
        private System.IAsyncResult OnBeginStartPlayer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LazyMovie.TvManagementService.IManagementService)(this)).BeginStartPlayer(callback, asyncState);
        }
        
        private object[] OnEndStartPlayer(System.IAsyncResult result) {
            ((LazyMovie.TvManagementService.IManagementService)(this)).EndStartPlayer(result);
            return null;
        }
        
        private void OnStartPlayerCompleted(object state) {
            if ((this.StartPlayerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartPlayerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartPlayerAsync() {
            this.StartPlayerAsync(null);
        }
        
        public void StartPlayerAsync(object userState) {
            if ((this.onBeginStartPlayerDelegate == null)) {
                this.onBeginStartPlayerDelegate = new BeginOperationDelegate(this.OnBeginStartPlayer);
            }
            if ((this.onEndStartPlayerDelegate == null)) {
                this.onEndStartPlayerDelegate = new EndOperationDelegate(this.OnEndStartPlayer);
            }
            if ((this.onStartPlayerCompletedDelegate == null)) {
                this.onStartPlayerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartPlayerCompleted);
            }
            base.InvokeAsync(this.onBeginStartPlayerDelegate, null, this.onEndStartPlayerDelegate, this.onStartPlayerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LazyMovie.TvManagementService.IManagementService.BeginClosePlayerWindow(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClosePlayerWindow(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LazyMovie.TvManagementService.IManagementService.EndClosePlayerWindow(System.IAsyncResult result) {
            base.Channel.EndClosePlayerWindow(result);
        }
        
        private System.IAsyncResult OnBeginClosePlayerWindow(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((LazyMovie.TvManagementService.IManagementService)(this)).BeginClosePlayerWindow(callback, asyncState);
        }
        
        private object[] OnEndClosePlayerWindow(System.IAsyncResult result) {
            ((LazyMovie.TvManagementService.IManagementService)(this)).EndClosePlayerWindow(result);
            return null;
        }
        
        private void OnClosePlayerWindowCompleted(object state) {
            if ((this.ClosePlayerWindowCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClosePlayerWindowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClosePlayerWindowAsync() {
            this.ClosePlayerWindowAsync(null);
        }
        
        public void ClosePlayerWindowAsync(object userState) {
            if ((this.onBeginClosePlayerWindowDelegate == null)) {
                this.onBeginClosePlayerWindowDelegate = new BeginOperationDelegate(this.OnBeginClosePlayerWindow);
            }
            if ((this.onEndClosePlayerWindowDelegate == null)) {
                this.onEndClosePlayerWindowDelegate = new EndOperationDelegate(this.OnEndClosePlayerWindow);
            }
            if ((this.onClosePlayerWindowCompletedDelegate == null)) {
                this.onClosePlayerWindowCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClosePlayerWindowCompleted);
            }
            base.InvokeAsync(this.onBeginClosePlayerWindowDelegate, null, this.onEndClosePlayerWindowDelegate, this.onClosePlayerWindowCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LazyMovie.TvManagementService.IManagementService.BeginPlayFile(string pathToFile, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlayFile(pathToFile, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void LazyMovie.TvManagementService.IManagementService.EndPlayFile(System.IAsyncResult result) {
            base.Channel.EndPlayFile(result);
        }
        
        private System.IAsyncResult OnBeginPlayFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string pathToFile = ((string)(inValues[0]));
            return ((LazyMovie.TvManagementService.IManagementService)(this)).BeginPlayFile(pathToFile, callback, asyncState);
        }
        
        private object[] OnEndPlayFile(System.IAsyncResult result) {
            ((LazyMovie.TvManagementService.IManagementService)(this)).EndPlayFile(result);
            return null;
        }
        
        private void OnPlayFileCompleted(object state) {
            if ((this.PlayFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayFileAsync(string pathToFile) {
            this.PlayFileAsync(pathToFile, null);
        }
        
        public void PlayFileAsync(string pathToFile, object userState) {
            if ((this.onBeginPlayFileDelegate == null)) {
                this.onBeginPlayFileDelegate = new BeginOperationDelegate(this.OnBeginPlayFile);
            }
            if ((this.onEndPlayFileDelegate == null)) {
                this.onEndPlayFileDelegate = new EndOperationDelegate(this.OnEndPlayFile);
            }
            if ((this.onPlayFileCompletedDelegate == null)) {
                this.onPlayFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayFileCompleted);
            }
            base.InvokeAsync(this.onBeginPlayFileDelegate, new object[] {
                        pathToFile}, this.onEndPlayFileDelegate, this.onPlayFileCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override LazyMovie.TvManagementService.IManagementService CreateChannel() {
            return new ManagementServiceClientChannel(this);
        }
        
        private class ManagementServiceClientChannel : ChannelBase<LazyMovie.TvManagementService.IManagementService>, LazyMovie.TvManagementService.IManagementService {
            
            public ManagementServiceClientChannel(System.ServiceModel.ClientBase<LazyMovie.TvManagementService.IManagementService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Ping", _args, callback, asyncState);
                return _result;
            }
            
            public string EndPing(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Ping", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlay(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Play", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPlay(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Play", _args, result);
            }
            
            public System.IAsyncResult BeginStartPlayer(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("StartPlayer", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStartPlayer(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StartPlayer", _args, result);
            }
            
            public System.IAsyncResult BeginClosePlayerWindow(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ClosePlayerWindow", _args, callback, asyncState);
                return _result;
            }
            
            public void EndClosePlayerWindow(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ClosePlayerWindow", _args, result);
            }
            
            public System.IAsyncResult BeginPlayFile(string pathToFile, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = pathToFile;
                System.IAsyncResult _result = base.BeginInvoke("PlayFile", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPlayFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PlayFile", _args, result);
            }
        }
    }
}
